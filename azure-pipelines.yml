# .NET Cave Build Script
# Set Major Build Version in variables
# before merging next to master, branch to new release version vX

# trigger: add any branches with releases to build AND change fixedBuildVersion variable!
trigger:
- refs/tags/*
- master
- next

pool:
  vmImage: 'windows-latest'

variables:
  fixedBuildVersion: '2.0'
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

- task: PowerShell@2
  name: SetGitVars
  displayName: Set git variables
  env:
    BUILD_BUILDNUMBER: $(Build.BuildNumber)
    BUILD_SOURCEBRANCHNAME: $(Build.SourceBranchName)
  inputs:
    targetType: inline
    script: |
      $fixedVersion = [Version]"$(fixedBuildVersion)"
      $gitTag = "$(git describe --tags --always)".Trim().TrimStart('v')                                # possible return values: 'hash' (no tags), 'tag-hash' (old tag), 'tag' (if commit == tag)
      if (!$gitTag.Contains('.'))
      {
        echo "no tag set yet!"
        $gitTag = "0.0.0-$gitTag"
      }
      if (!$gitTag.Contains('-'))
      {
        echo "commit has valid tag set!"
        $version = $gitTag
      }
      else
      {
        $semVer = "ci-$env:BUILD_BUILDNUMBER".Replace('.', '-')                                     # semVer = ci-yyyyMMdd-NN
        $gitTagVersion = [Version]$gitTag.Split('-')[0]
        if ($gitTagVersion.Major -ne $fixedVersion.Major)
        {
          echo "fixed version major differs from last git tag, using fixed version!"
          $version = "$fixedVersion-$semVer"
        }
        else
        {
          echo "using git tag version, incrementing build number!"
          $version = "$($gitTagVersion.Major).$($gitTagVersion.Minor).$($gitTagVersion.Build+1)-$semVer"
        }
      }	  
      echo "branch = $env:BUILD_SOURCEBRANCHNAME"
      echo "fixedVersion = '$fixedVersion'"
      echo "gitTag = '$gitTag'"
      echo "build version = '$version'"
      Write-Host "##vso[task.setvariable variable=Version]$version"

- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '>=4.9.0'

- task: NuGetCommand@2
  displayName: Restore nuget packages
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: Build solution
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    testAssemblyVer2: |
      **/bin/Release/**/Test.exe
      **/bin/Release/**/Test.dll

- task: NuGetCommand@2
  displayName: Push to nuget (release)
  inputs:
    command: push
    packagesToPush: '$(Build.SourcesDirectory)/**/bin/Release/*.nupkg'
    nuGetFeedType: external
    publishFeedCredentials: 'nuget-default'
    includeSymbols: true
